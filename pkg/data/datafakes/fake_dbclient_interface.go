// Code generated by counterfeiter. DO NOT EDIT.
package datafakes

import (
	"chat/pkg/data"
	"chat/pkg/rest/models"
	"context"
	"sync"
)

type FakeDBClientInterface struct {
	AddChatroomStub        func(context.Context, *models.Chatroom) error
	addChatroomMutex       sync.RWMutex
	addChatroomArgsForCall []struct {
		arg1 context.Context
		arg2 *models.Chatroom
	}
	addChatroomReturns struct {
		result1 error
	}
	addChatroomReturnsOnCall map[int]struct {
		result1 error
	}
	AddNewUserStub        func(context.Context, *models.User) error
	addNewUserMutex       sync.RWMutex
	addNewUserArgsForCall []struct {
		arg1 context.Context
		arg2 *models.User
	}
	addNewUserReturns struct {
		result1 error
	}
	addNewUserReturnsOnCall map[int]struct {
		result1 error
	}
	AddUserChatroomStub        func(context.Context, *models.UserChatroom) error
	addUserChatroomMutex       sync.RWMutex
	addUserChatroomArgsForCall []struct {
		arg1 context.Context
		arg2 *models.UserChatroom
	}
	addUserChatroomReturns struct {
		result1 error
	}
	addUserChatroomReturnsOnCall map[int]struct {
		result1 error
	}
	GetChatroomByIdStub        func(context.Context, int32) (*models.Chatroom, error)
	getChatroomByIdMutex       sync.RWMutex
	getChatroomByIdArgsForCall []struct {
		arg1 context.Context
		arg2 int32
	}
	getChatroomByIdReturns struct {
		result1 *models.Chatroom
		result2 error
	}
	getChatroomByIdReturnsOnCall map[int]struct {
		result1 *models.Chatroom
		result2 error
	}
	GetChatroomByNameStub        func(context.Context, string) (*models.Chatroom, error)
	getChatroomByNameMutex       sync.RWMutex
	getChatroomByNameArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getChatroomByNameReturns struct {
		result1 *models.Chatroom
		result2 error
	}
	getChatroomByNameReturnsOnCall map[int]struct {
		result1 *models.Chatroom
		result2 error
	}
	GetUserByUsernameStub        func(context.Context, string) (*models.User, error)
	getUserByUsernameMutex       sync.RWMutex
	getUserByUsernameArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getUserByUsernameReturns struct {
		result1 *models.User
		result2 error
	}
	getUserByUsernameReturnsOnCall map[int]struct {
		result1 *models.User
		result2 error
	}
	ListUserChatroomsByChatroomIdStub        func(context.Context, int32) ([]*models.UserChatroom, error)
	listUserChatroomsByChatroomIdMutex       sync.RWMutex
	listUserChatroomsByChatroomIdArgsForCall []struct {
		arg1 context.Context
		arg2 int32
	}
	listUserChatroomsByChatroomIdReturns struct {
		result1 []*models.UserChatroom
		result2 error
	}
	listUserChatroomsByChatroomIdReturnsOnCall map[int]struct {
		result1 []*models.UserChatroom
		result2 error
	}
	ListUserChatroomsByUserIdStub        func(context.Context, int32) ([]*models.UserChatroom, error)
	listUserChatroomsByUserIdMutex       sync.RWMutex
	listUserChatroomsByUserIdArgsForCall []struct {
		arg1 context.Context
		arg2 int32
	}
	listUserChatroomsByUserIdReturns struct {
		result1 []*models.UserChatroom
		result2 error
	}
	listUserChatroomsByUserIdReturnsOnCall map[int]struct {
		result1 []*models.UserChatroom
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDBClientInterface) AddChatroom(arg1 context.Context, arg2 *models.Chatroom) error {
	fake.addChatroomMutex.Lock()
	ret, specificReturn := fake.addChatroomReturnsOnCall[len(fake.addChatroomArgsForCall)]
	fake.addChatroomArgsForCall = append(fake.addChatroomArgsForCall, struct {
		arg1 context.Context
		arg2 *models.Chatroom
	}{arg1, arg2})
	stub := fake.AddChatroomStub
	fakeReturns := fake.addChatroomReturns
	fake.recordInvocation("AddChatroom", []interface{}{arg1, arg2})
	fake.addChatroomMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDBClientInterface) AddChatroomCallCount() int {
	fake.addChatroomMutex.RLock()
	defer fake.addChatroomMutex.RUnlock()
	return len(fake.addChatroomArgsForCall)
}

func (fake *FakeDBClientInterface) AddChatroomCalls(stub func(context.Context, *models.Chatroom) error) {
	fake.addChatroomMutex.Lock()
	defer fake.addChatroomMutex.Unlock()
	fake.AddChatroomStub = stub
}

func (fake *FakeDBClientInterface) AddChatroomArgsForCall(i int) (context.Context, *models.Chatroom) {
	fake.addChatroomMutex.RLock()
	defer fake.addChatroomMutex.RUnlock()
	argsForCall := fake.addChatroomArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDBClientInterface) AddChatroomReturns(result1 error) {
	fake.addChatroomMutex.Lock()
	defer fake.addChatroomMutex.Unlock()
	fake.AddChatroomStub = nil
	fake.addChatroomReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBClientInterface) AddChatroomReturnsOnCall(i int, result1 error) {
	fake.addChatroomMutex.Lock()
	defer fake.addChatroomMutex.Unlock()
	fake.AddChatroomStub = nil
	if fake.addChatroomReturnsOnCall == nil {
		fake.addChatroomReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addChatroomReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBClientInterface) AddNewUser(arg1 context.Context, arg2 *models.User) error {
	fake.addNewUserMutex.Lock()
	ret, specificReturn := fake.addNewUserReturnsOnCall[len(fake.addNewUserArgsForCall)]
	fake.addNewUserArgsForCall = append(fake.addNewUserArgsForCall, struct {
		arg1 context.Context
		arg2 *models.User
	}{arg1, arg2})
	stub := fake.AddNewUserStub
	fakeReturns := fake.addNewUserReturns
	fake.recordInvocation("AddNewUser", []interface{}{arg1, arg2})
	fake.addNewUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDBClientInterface) AddNewUserCallCount() int {
	fake.addNewUserMutex.RLock()
	defer fake.addNewUserMutex.RUnlock()
	return len(fake.addNewUserArgsForCall)
}

func (fake *FakeDBClientInterface) AddNewUserCalls(stub func(context.Context, *models.User) error) {
	fake.addNewUserMutex.Lock()
	defer fake.addNewUserMutex.Unlock()
	fake.AddNewUserStub = stub
}

func (fake *FakeDBClientInterface) AddNewUserArgsForCall(i int) (context.Context, *models.User) {
	fake.addNewUserMutex.RLock()
	defer fake.addNewUserMutex.RUnlock()
	argsForCall := fake.addNewUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDBClientInterface) AddNewUserReturns(result1 error) {
	fake.addNewUserMutex.Lock()
	defer fake.addNewUserMutex.Unlock()
	fake.AddNewUserStub = nil
	fake.addNewUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBClientInterface) AddNewUserReturnsOnCall(i int, result1 error) {
	fake.addNewUserMutex.Lock()
	defer fake.addNewUserMutex.Unlock()
	fake.AddNewUserStub = nil
	if fake.addNewUserReturnsOnCall == nil {
		fake.addNewUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addNewUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBClientInterface) AddUserChatroom(arg1 context.Context, arg2 *models.UserChatroom) error {
	fake.addUserChatroomMutex.Lock()
	ret, specificReturn := fake.addUserChatroomReturnsOnCall[len(fake.addUserChatroomArgsForCall)]
	fake.addUserChatroomArgsForCall = append(fake.addUserChatroomArgsForCall, struct {
		arg1 context.Context
		arg2 *models.UserChatroom
	}{arg1, arg2})
	stub := fake.AddUserChatroomStub
	fakeReturns := fake.addUserChatroomReturns
	fake.recordInvocation("AddUserChatroom", []interface{}{arg1, arg2})
	fake.addUserChatroomMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDBClientInterface) AddUserChatroomCallCount() int {
	fake.addUserChatroomMutex.RLock()
	defer fake.addUserChatroomMutex.RUnlock()
	return len(fake.addUserChatroomArgsForCall)
}

func (fake *FakeDBClientInterface) AddUserChatroomCalls(stub func(context.Context, *models.UserChatroom) error) {
	fake.addUserChatroomMutex.Lock()
	defer fake.addUserChatroomMutex.Unlock()
	fake.AddUserChatroomStub = stub
}

func (fake *FakeDBClientInterface) AddUserChatroomArgsForCall(i int) (context.Context, *models.UserChatroom) {
	fake.addUserChatroomMutex.RLock()
	defer fake.addUserChatroomMutex.RUnlock()
	argsForCall := fake.addUserChatroomArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDBClientInterface) AddUserChatroomReturns(result1 error) {
	fake.addUserChatroomMutex.Lock()
	defer fake.addUserChatroomMutex.Unlock()
	fake.AddUserChatroomStub = nil
	fake.addUserChatroomReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBClientInterface) AddUserChatroomReturnsOnCall(i int, result1 error) {
	fake.addUserChatroomMutex.Lock()
	defer fake.addUserChatroomMutex.Unlock()
	fake.AddUserChatroomStub = nil
	if fake.addUserChatroomReturnsOnCall == nil {
		fake.addUserChatroomReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addUserChatroomReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBClientInterface) GetChatroomById(arg1 context.Context, arg2 int32) (*models.Chatroom, error) {
	fake.getChatroomByIdMutex.Lock()
	ret, specificReturn := fake.getChatroomByIdReturnsOnCall[len(fake.getChatroomByIdArgsForCall)]
	fake.getChatroomByIdArgsForCall = append(fake.getChatroomByIdArgsForCall, struct {
		arg1 context.Context
		arg2 int32
	}{arg1, arg2})
	stub := fake.GetChatroomByIdStub
	fakeReturns := fake.getChatroomByIdReturns
	fake.recordInvocation("GetChatroomById", []interface{}{arg1, arg2})
	fake.getChatroomByIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDBClientInterface) GetChatroomByIdCallCount() int {
	fake.getChatroomByIdMutex.RLock()
	defer fake.getChatroomByIdMutex.RUnlock()
	return len(fake.getChatroomByIdArgsForCall)
}

func (fake *FakeDBClientInterface) GetChatroomByIdCalls(stub func(context.Context, int32) (*models.Chatroom, error)) {
	fake.getChatroomByIdMutex.Lock()
	defer fake.getChatroomByIdMutex.Unlock()
	fake.GetChatroomByIdStub = stub
}

func (fake *FakeDBClientInterface) GetChatroomByIdArgsForCall(i int) (context.Context, int32) {
	fake.getChatroomByIdMutex.RLock()
	defer fake.getChatroomByIdMutex.RUnlock()
	argsForCall := fake.getChatroomByIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDBClientInterface) GetChatroomByIdReturns(result1 *models.Chatroom, result2 error) {
	fake.getChatroomByIdMutex.Lock()
	defer fake.getChatroomByIdMutex.Unlock()
	fake.GetChatroomByIdStub = nil
	fake.getChatroomByIdReturns = struct {
		result1 *models.Chatroom
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClientInterface) GetChatroomByIdReturnsOnCall(i int, result1 *models.Chatroom, result2 error) {
	fake.getChatroomByIdMutex.Lock()
	defer fake.getChatroomByIdMutex.Unlock()
	fake.GetChatroomByIdStub = nil
	if fake.getChatroomByIdReturnsOnCall == nil {
		fake.getChatroomByIdReturnsOnCall = make(map[int]struct {
			result1 *models.Chatroom
			result2 error
		})
	}
	fake.getChatroomByIdReturnsOnCall[i] = struct {
		result1 *models.Chatroom
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClientInterface) GetChatroomByName(arg1 context.Context, arg2 string) (*models.Chatroom, error) {
	fake.getChatroomByNameMutex.Lock()
	ret, specificReturn := fake.getChatroomByNameReturnsOnCall[len(fake.getChatroomByNameArgsForCall)]
	fake.getChatroomByNameArgsForCall = append(fake.getChatroomByNameArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetChatroomByNameStub
	fakeReturns := fake.getChatroomByNameReturns
	fake.recordInvocation("GetChatroomByName", []interface{}{arg1, arg2})
	fake.getChatroomByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDBClientInterface) GetChatroomByNameCallCount() int {
	fake.getChatroomByNameMutex.RLock()
	defer fake.getChatroomByNameMutex.RUnlock()
	return len(fake.getChatroomByNameArgsForCall)
}

func (fake *FakeDBClientInterface) GetChatroomByNameCalls(stub func(context.Context, string) (*models.Chatroom, error)) {
	fake.getChatroomByNameMutex.Lock()
	defer fake.getChatroomByNameMutex.Unlock()
	fake.GetChatroomByNameStub = stub
}

func (fake *FakeDBClientInterface) GetChatroomByNameArgsForCall(i int) (context.Context, string) {
	fake.getChatroomByNameMutex.RLock()
	defer fake.getChatroomByNameMutex.RUnlock()
	argsForCall := fake.getChatroomByNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDBClientInterface) GetChatroomByNameReturns(result1 *models.Chatroom, result2 error) {
	fake.getChatroomByNameMutex.Lock()
	defer fake.getChatroomByNameMutex.Unlock()
	fake.GetChatroomByNameStub = nil
	fake.getChatroomByNameReturns = struct {
		result1 *models.Chatroom
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClientInterface) GetChatroomByNameReturnsOnCall(i int, result1 *models.Chatroom, result2 error) {
	fake.getChatroomByNameMutex.Lock()
	defer fake.getChatroomByNameMutex.Unlock()
	fake.GetChatroomByNameStub = nil
	if fake.getChatroomByNameReturnsOnCall == nil {
		fake.getChatroomByNameReturnsOnCall = make(map[int]struct {
			result1 *models.Chatroom
			result2 error
		})
	}
	fake.getChatroomByNameReturnsOnCall[i] = struct {
		result1 *models.Chatroom
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClientInterface) GetUserByUsername(arg1 context.Context, arg2 string) (*models.User, error) {
	fake.getUserByUsernameMutex.Lock()
	ret, specificReturn := fake.getUserByUsernameReturnsOnCall[len(fake.getUserByUsernameArgsForCall)]
	fake.getUserByUsernameArgsForCall = append(fake.getUserByUsernameArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetUserByUsernameStub
	fakeReturns := fake.getUserByUsernameReturns
	fake.recordInvocation("GetUserByUsername", []interface{}{arg1, arg2})
	fake.getUserByUsernameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDBClientInterface) GetUserByUsernameCallCount() int {
	fake.getUserByUsernameMutex.RLock()
	defer fake.getUserByUsernameMutex.RUnlock()
	return len(fake.getUserByUsernameArgsForCall)
}

func (fake *FakeDBClientInterface) GetUserByUsernameCalls(stub func(context.Context, string) (*models.User, error)) {
	fake.getUserByUsernameMutex.Lock()
	defer fake.getUserByUsernameMutex.Unlock()
	fake.GetUserByUsernameStub = stub
}

func (fake *FakeDBClientInterface) GetUserByUsernameArgsForCall(i int) (context.Context, string) {
	fake.getUserByUsernameMutex.RLock()
	defer fake.getUserByUsernameMutex.RUnlock()
	argsForCall := fake.getUserByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDBClientInterface) GetUserByUsernameReturns(result1 *models.User, result2 error) {
	fake.getUserByUsernameMutex.Lock()
	defer fake.getUserByUsernameMutex.Unlock()
	fake.GetUserByUsernameStub = nil
	fake.getUserByUsernameReturns = struct {
		result1 *models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClientInterface) GetUserByUsernameReturnsOnCall(i int, result1 *models.User, result2 error) {
	fake.getUserByUsernameMutex.Lock()
	defer fake.getUserByUsernameMutex.Unlock()
	fake.GetUserByUsernameStub = nil
	if fake.getUserByUsernameReturnsOnCall == nil {
		fake.getUserByUsernameReturnsOnCall = make(map[int]struct {
			result1 *models.User
			result2 error
		})
	}
	fake.getUserByUsernameReturnsOnCall[i] = struct {
		result1 *models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClientInterface) ListUserChatroomsByChatroomId(arg1 context.Context, arg2 int32) ([]*models.UserChatroom, error) {
	fake.listUserChatroomsByChatroomIdMutex.Lock()
	ret, specificReturn := fake.listUserChatroomsByChatroomIdReturnsOnCall[len(fake.listUserChatroomsByChatroomIdArgsForCall)]
	fake.listUserChatroomsByChatroomIdArgsForCall = append(fake.listUserChatroomsByChatroomIdArgsForCall, struct {
		arg1 context.Context
		arg2 int32
	}{arg1, arg2})
	stub := fake.ListUserChatroomsByChatroomIdStub
	fakeReturns := fake.listUserChatroomsByChatroomIdReturns
	fake.recordInvocation("ListUserChatroomsByChatroomId", []interface{}{arg1, arg2})
	fake.listUserChatroomsByChatroomIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDBClientInterface) ListUserChatroomsByChatroomIdCallCount() int {
	fake.listUserChatroomsByChatroomIdMutex.RLock()
	defer fake.listUserChatroomsByChatroomIdMutex.RUnlock()
	return len(fake.listUserChatroomsByChatroomIdArgsForCall)
}

func (fake *FakeDBClientInterface) ListUserChatroomsByChatroomIdCalls(stub func(context.Context, int32) ([]*models.UserChatroom, error)) {
	fake.listUserChatroomsByChatroomIdMutex.Lock()
	defer fake.listUserChatroomsByChatroomIdMutex.Unlock()
	fake.ListUserChatroomsByChatroomIdStub = stub
}

func (fake *FakeDBClientInterface) ListUserChatroomsByChatroomIdArgsForCall(i int) (context.Context, int32) {
	fake.listUserChatroomsByChatroomIdMutex.RLock()
	defer fake.listUserChatroomsByChatroomIdMutex.RUnlock()
	argsForCall := fake.listUserChatroomsByChatroomIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDBClientInterface) ListUserChatroomsByChatroomIdReturns(result1 []*models.UserChatroom, result2 error) {
	fake.listUserChatroomsByChatroomIdMutex.Lock()
	defer fake.listUserChatroomsByChatroomIdMutex.Unlock()
	fake.ListUserChatroomsByChatroomIdStub = nil
	fake.listUserChatroomsByChatroomIdReturns = struct {
		result1 []*models.UserChatroom
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClientInterface) ListUserChatroomsByChatroomIdReturnsOnCall(i int, result1 []*models.UserChatroom, result2 error) {
	fake.listUserChatroomsByChatroomIdMutex.Lock()
	defer fake.listUserChatroomsByChatroomIdMutex.Unlock()
	fake.ListUserChatroomsByChatroomIdStub = nil
	if fake.listUserChatroomsByChatroomIdReturnsOnCall == nil {
		fake.listUserChatroomsByChatroomIdReturnsOnCall = make(map[int]struct {
			result1 []*models.UserChatroom
			result2 error
		})
	}
	fake.listUserChatroomsByChatroomIdReturnsOnCall[i] = struct {
		result1 []*models.UserChatroom
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClientInterface) ListUserChatroomsByUserId(arg1 context.Context, arg2 int32) ([]*models.UserChatroom, error) {
	fake.listUserChatroomsByUserIdMutex.Lock()
	ret, specificReturn := fake.listUserChatroomsByUserIdReturnsOnCall[len(fake.listUserChatroomsByUserIdArgsForCall)]
	fake.listUserChatroomsByUserIdArgsForCall = append(fake.listUserChatroomsByUserIdArgsForCall, struct {
		arg1 context.Context
		arg2 int32
	}{arg1, arg2})
	stub := fake.ListUserChatroomsByUserIdStub
	fakeReturns := fake.listUserChatroomsByUserIdReturns
	fake.recordInvocation("ListUserChatroomsByUserId", []interface{}{arg1, arg2})
	fake.listUserChatroomsByUserIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDBClientInterface) ListUserChatroomsByUserIdCallCount() int {
	fake.listUserChatroomsByUserIdMutex.RLock()
	defer fake.listUserChatroomsByUserIdMutex.RUnlock()
	return len(fake.listUserChatroomsByUserIdArgsForCall)
}

func (fake *FakeDBClientInterface) ListUserChatroomsByUserIdCalls(stub func(context.Context, int32) ([]*models.UserChatroom, error)) {
	fake.listUserChatroomsByUserIdMutex.Lock()
	defer fake.listUserChatroomsByUserIdMutex.Unlock()
	fake.ListUserChatroomsByUserIdStub = stub
}

func (fake *FakeDBClientInterface) ListUserChatroomsByUserIdArgsForCall(i int) (context.Context, int32) {
	fake.listUserChatroomsByUserIdMutex.RLock()
	defer fake.listUserChatroomsByUserIdMutex.RUnlock()
	argsForCall := fake.listUserChatroomsByUserIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDBClientInterface) ListUserChatroomsByUserIdReturns(result1 []*models.UserChatroom, result2 error) {
	fake.listUserChatroomsByUserIdMutex.Lock()
	defer fake.listUserChatroomsByUserIdMutex.Unlock()
	fake.ListUserChatroomsByUserIdStub = nil
	fake.listUserChatroomsByUserIdReturns = struct {
		result1 []*models.UserChatroom
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClientInterface) ListUserChatroomsByUserIdReturnsOnCall(i int, result1 []*models.UserChatroom, result2 error) {
	fake.listUserChatroomsByUserIdMutex.Lock()
	defer fake.listUserChatroomsByUserIdMutex.Unlock()
	fake.ListUserChatroomsByUserIdStub = nil
	if fake.listUserChatroomsByUserIdReturnsOnCall == nil {
		fake.listUserChatroomsByUserIdReturnsOnCall = make(map[int]struct {
			result1 []*models.UserChatroom
			result2 error
		})
	}
	fake.listUserChatroomsByUserIdReturnsOnCall[i] = struct {
		result1 []*models.UserChatroom
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClientInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addChatroomMutex.RLock()
	defer fake.addChatroomMutex.RUnlock()
	fake.addNewUserMutex.RLock()
	defer fake.addNewUserMutex.RUnlock()
	fake.addUserChatroomMutex.RLock()
	defer fake.addUserChatroomMutex.RUnlock()
	fake.getChatroomByIdMutex.RLock()
	defer fake.getChatroomByIdMutex.RUnlock()
	fake.getChatroomByNameMutex.RLock()
	defer fake.getChatroomByNameMutex.RUnlock()
	fake.getUserByUsernameMutex.RLock()
	defer fake.getUserByUsernameMutex.RUnlock()
	fake.listUserChatroomsByChatroomIdMutex.RLock()
	defer fake.listUserChatroomsByChatroomIdMutex.RUnlock()
	fake.listUserChatroomsByUserIdMutex.RLock()
	defer fake.listUserChatroomsByUserIdMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDBClientInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ data.DBClientInterface = new(FakeDBClientInterface)
